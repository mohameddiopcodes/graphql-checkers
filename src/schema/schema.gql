# GraphQL Type definitions
type Query {
  authorizeUser(user: UserLoginInput!): ReadableUser!
  readUser(id: String!): ReadableUser!
  myAccount: ReadableUser!
  readUsers: ReadableUser!
  myGames(player: Int): [Game]
}

type Mutation {
  createUser(user: UserSignupInput!): ReadableUser!
  updateUser(user: UserUpdateInput!): ReadableUser!
  deleteUser: ReadableUser!
  newGame(opponentId: String, boardSize: Int): Game!
  joinGame(gameId: String!): Status!
  move(gameId: String!, start: CoordinateInput!, end: CoordinateInput!): Event!
}

type Subscription {
  joinGame(gameId: String!): Event!
}

input UserLoginInput {
  email: String!
  password: String!
  profilePicture: String
}

input UserSignupInput {
  name: String!
  email: String!
  password: String!
  profilePicture: String
}

input UserUpdateInput {
  name: String
  email: String
  profilePicture: String
  password: String
  age: Int
}

type ReadableUser {
  name: String!
  email: String!
  profilePicture: String
  age: Int
}

type Game {
  id: String!
  turn: Int!
  board: Board!
  status: Status!
  players: Players!
}

type Board {
  size: Int!
  state: [[Int]]!
}

type Status {
  game: Int!
  playerOne: Int!
  playerTwo: Int!
}

type Players {
  one: String!
  two: String
}

type Move {
  start: Coordinates
  end: Coordinates
}

type Event {
  status: Status
  move: Move
}

type Coordinates {
  x: Int!
  y: Int!
}

input CoordinateInput {
  x: Int!
  y: Int!
}